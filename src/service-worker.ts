/// <reference lib="webworker" />

import { build, files, version } from '$service-worker';

const worker = self as unknown as ServiceWorkerGlobalScope;
const CACHE_NAME = `offline-cache-v${version}`;

// `build` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = build.concat(files);
const staticAssets = new Set(to_cache);

console.log(files);

worker.addEventListener('install', (event) => {
	event.waitUntil(
		caches
			.open(CACHE_NAME)
			.then((cache) => cache.addAll(to_cache))
			.then(() => {
				worker.skipWaiting();
			})
	);
});

worker.addEventListener('activate', (event) => {
	event.waitUntil(
		caches.keys().then(async (keys) => {
			// delete old caches
			for (const key of keys) {
				if (key !== CACHE_NAME) await caches.delete(key);
			}

			worker.clients.claim();
		})
	);
});

/**
 * Fetch the asset from the network and store it in the cache.
 * Fall back to the cache if the user is offline.
 */
async function fetchAndCache(request: Request) {
	const cache = await caches.open(CACHE_NAME);

	try {
		const response = await fetch(request);
		cache.put(request, response.clone());
		return response;
	} catch (err) {
		const response = await cache.match(request);
		if (response) return response;

		// Optionally provide a fallback page here
		// Example: return cache.match('/offline.html');
		throw err;
	}
}

worker.addEventListener('fetch', (event) => {
	// Skip fetch handling if not a GET request or if it's a range request for partial content
	if (event.request.method !== 'GET' || event.request.headers.has('range')) return;

	const url = new URL(event.request.url);
	const isHttp = url.protocol.startsWith('http');
	const isDevServerRequest =
		url.hostname === self.location.hostname && url.port !== self.location.port;
	const isStaticAsset = url.host === self.location.host && staticAssets.has(url.pathname);
	const skipBecauseUncached = event.request.cache === 'only-if-cached' && !isStaticAsset;

	if (isHttp && !isDevServerRequest && !skipBecauseUncached) {
		event.respondWith(
			(async () => {
				try {
					const cachedResponse = await caches.match(event.request);
					if (cachedResponse) {
						return cachedResponse;
					}
					// Attempt to fetch from network
					const networkResponse = await fetch(event.request);
					// Cache the new fetched response
					const cache = await caches.open(CACHE_NAME);
					cache.put(event.request, networkResponse.clone());
					return networkResponse;
				} catch (error) {
					// Network request failed and no cache available
					console.error(`Fetch failed; returning offline page instead.`, error);
					const cachedResponse = await caches.match('/offline.html');
					return (
						cachedResponse ||
						new Response('You are offline', { status: 200, statusText: 'Offline' })
					);
				}
			})()
		);
	}
});
